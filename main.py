import os
import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from parser import check_new_tours
from filters import load_filters, save_filters

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
GROUP_ID = int(os.getenv("GROUP_ID"))
TOUR_CHAT_ID = int(os.getenv("TOUR_CHAT_ID"))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# --- FSM –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ ---
class FilterForm(StatesGroup):
    city = State()
    budget = State()
    days = State()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(commands=["start"])
async def start(message: types.Message):
    if message.from_user.id == OWNER_ID:
        await message.answer("–ë–æ—Ç –ø—Ä–∞—Ü—é—î üü¢")

# --- –ö–æ–º–∞–Ω–¥–∞ /check ---
@dp.message(commands=["check"])
async def manual_check(message: types.Message):
    if message.from_user.id == OWNER_ID:
        await run_check()

# --- –ö–æ–º–∞–Ω–¥–∞ /filters ---
@dp.message(F.text == "/filters")
async def show_filters(message: Message):
    filters = load_filters()
    text = (
        f"üîß –ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏:\n"
        f"‚úàÔ∏è –ú—ñ—Å—Ç–æ –≤–∏–ª—å–æ—Ç—É: {filters['departure_city']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: –¥–æ {filters['max_price']}$\n"
        f"üìÖ –î–Ω—ñ–≤: –≤—ñ–¥ {filters['min_days']} –¥–æ {filters['max_days']}"
    )

    buttons = [
        [InlineKeyboardButton(text="‚úàÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="change_city")],
        [InlineKeyboardButton(text="üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="change_budget")],
        [InlineKeyboardButton(text="üìÖ –ó–º—ñ–Ω–∏—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback_data="change_days")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard)

# --- Callback: –∑–º—ñ–Ω–∞ –º—ñ—Å—Ç–∞ ---
@dp.callback_query(F.data == "change_city")
async def change_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–µ –º—ñ—Å—Ç–æ –≤–∏–ª—å–æ—Ç—É:")
    await state.set_state(FilterForm.city)
    await callback.answer()

@dp.message(StateFilter(FilterForm.city))
async def save_city(message: Message, state: FSMContext):
    filters = load_filters()
    filters["departure_city"] = message.text.strip()
    save_filters(filters)
    await message.answer(f"‚úÖ –ú—ñ—Å—Ç–æ –≤–∏–ª—å–æ—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {message.text}")
    await state.clear()

# --- Callback: –∑–º—ñ–Ω–∞ –±—é–¥–∂–µ—Ç—É ---
@dp.callback_query(F.data == "change_budget")
async def change_budget(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 800):")
    await state.set_state(FilterForm.budget)
    await callback.answer()

@dp.message(StateFilter(FilterForm.budget))
async def save_budget(message: Message, state: FSMContext):
    try:
        val = int(message.text.strip())
        filters = load_filters()
        filters["max_price"] = val
        save_filters(filters)
        await message.answer(f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {val}$")
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –ª–∏—à–µ —á–∏—Å–ª–æ.")
    await state.clear()

# --- Callback: –∑–º—ñ–Ω–∞ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ ---
@dp.callback_query(F.data == "change_days")
async def change_days(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5-10):")
    await state.set_state(FilterForm.days)
    await callback.answer()

@dp.message(StateFilter(FilterForm.days))
async def save_days(message: Message, state: FSMContext):
    try:
        parts = message.text.strip().split("-")
        min_d, max_d = int(parts[0]), int(parts[1])
        filters = load_filters()
        filters["min_days"] = min_d
        filters["max_days"] = max_d
        save_filters(filters)
        await message.answer(f"‚úÖ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ: –≤—ñ–¥ {min_d} –¥–æ {max_d} –¥–Ω—ñ–≤")
    except:
        await message.answer("‚ùå –ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥—É: 5-10")
    await state.clear()

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—É—Ä—ñ–≤ ---
async def run_check():
    try:
        new_tours = await check_new_tours()
        if new_tours:
            await bot.send_message(GROUP_ID, f"üü¢ –ó–Ω–∞–π–¥–µ–Ω–æ {len(new_tours)} –Ω–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤")
            for tour in new_tours:
                await bot.send_message(TOUR_CHAT_ID, tour)
        else:
            await bot.send_message(TOUR_CHAT_ID, "üü° –ù–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        await bot.send_message(GROUP_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        print(e)

# --- –ó–∞–ø–∞—Å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ---
@dp.message()
async def fallback(message: types.Message):
    if message.from_user.id == OWNER_ID:
        await message.answer("–í–≤–µ–¥–∏ /check, /start –∞–±–æ /filters")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="check", description="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É"),
        BotCommand(command="filters", description="–ó–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏"),
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
