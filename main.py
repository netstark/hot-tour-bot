import os
import asyncio
import logging
import json

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from parser import check_new_tours
from filters import load_filters, save_filters

from fastapi import FastAPI
from threading import Thread

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
GROUP_ID = int(os.getenv("GROUP_ID"))
TOUR_CHAT_ID = int(os.getenv("TOUR_CHAT_ID"))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

app = FastAPI()

# == –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.chat.id != OWNER_ID:
        return
    await message.answer("–ë–æ—Ç –ø—Ä–∞—Ü—é—î üü¢")

    tours = await check_new_tours()
    if tours:
        await message.answer(f"üü¢ –ó–Ω–∞–π–¥–µ–Ω–æ {len(tours)} –Ω–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤")
        for tour in tours:
            await bot.send_message(GROUP_ID, tour)
    else:
        await message.answer("üü° –ù–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# == –ó–º—ñ–Ω–∞ –º—ñ—Å—Ç–∞
@dp.message(lambda m: m.text and m.text.startswith("‚úàÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ"))
async def change_city(message: Message, state: FSMContext):
    if message.chat.id != OWNER_ID:
        return
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–µ –º—ñ—Å—Ç–æ –≤–∏–ª—å–æ—Ç—É:")
    await state.set_state("waiting_for_city")

@dp.message(lambda m: True)
async def get_city(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "waiting_for_city":
        filters = load_filters()
        filters["departure_city"] = message.text
        save_filters(filters)
        await message.answer(f"–ú—ñ—Å—Ç–æ –≤–∏–ª—å–æ—Ç—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {message.text}")
        await state.clear()

# == HTTP endpoint –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
@app.get("/check")
async def check():
    try:
        new_tours = await check_new_tours()
        if new_tours:
            for tour in new_tours:
                await bot.send_message(GROUP_ID, f"üü¢ –ó–Ω–∞–π–¥–µ–Ω–æ 1 –Ω–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤\n{tour}")
            return {"status": f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(new_tours)} –Ω–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤"}
        return {"status": "üîò –ù–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}
    except Exception as e:
        await bot.send_message(GROUP_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        return {"status": "–ü–æ–º–∏–ª–∫–∞"}

# == –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
def start_polling():
    asyncio.run(dp.start_polling(bot))

Thread(target=start_polling).start()
