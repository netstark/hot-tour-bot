import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "549415850"))
GROUP_ID = -1002111587283  # ID —Ç–≤–æ—î—ó –≥—Ä—É–ø–∏ (–ª–æ–≥—É–≤–∞–Ω–Ω—è)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


async def log_to_group(text: str):
    now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    await bot.send_message(GROUP_ID, f"{now} {text}")


async def send_result(text: str):
    await bot.send_message(OWNER_ID, text)


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ë–æ—Ç –ø—Ä–∞—Ü—é—î ‚úÖ")
    await log_to_group("–û—Ç—Ä–∏–º–∞–Ω–æ /start")


async def hourly_task():
    while True:
        try:
            await log_to_group("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤... (—Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)")
            # –¢—É—Ç –±—É–¥–µ –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö —Ç—É—Ä—ñ–≤
            # await send_result("üÜï –ù–æ–≤–∏–π —Ç—É—Ä: ...")
        except Exception as e:
            await log_to_group(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        await asyncio.sleep(3600)  # 1 –≥–æ–¥–∏–Ω–∞


async def on_startup(dp):
    asyncio.create_task(hourly_task())
    await log_to_group("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ üü¢")


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
